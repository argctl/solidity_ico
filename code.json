{
  "giteta": "Ly8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJVU0wtMS4xCnByYWdtYSBzb2xpZGl0eSA+PSAiMC44LjE4IjsKaW1wb3J0ICIuL2dpdGFyZy5zb2wiOwppbXBvcnQgIi4vb2JqZWN0cy9SZXBvLnNvbCI7CmltcG9ydCAiLi9vYmplY3RzL0NvbW1pdC5zb2wiOwppbXBvcnQgIi4vb2JqZWN0cy9Mb2cuc29sIjsKCi8vIFRpbWVMb2cgaGFuZHNoYWtlIHN0cmluZy9ieXRlcyBmb3IgYmxvY2tjaGFpbiBpbnRlcmZhY2UKCmNvbnRyYWN0IGdpdGV0YSB7CiAgLy8gUkVWSUVXIC0gd2FsbGV0IGNoYW5nZWFibGUgd2l0aCBoYW5kc2hha2VzIGluIGdpdGFycmF5CiAgYWRkcmVzcyBwdWJsaWMgZ2l0YXJnV2FsbGV0OwogIGdpdGFyZyBwdWJsaWMgR2l0YXJnOwogIGFkZHJlc3MgcHVibGljIGFyZzsKCiAgc3RydWN0IFRpbWUgewogICAgYWRkcmVzcyBjb21taXQ7CiAgICB1aW50IHRpbWVzdGFtcDsKICB9CgogIG1hcHBpbmcoUmVwbyA9PiBUaW1lW10pIGNvbW1pdHM7CiAgbWFwcGluZyhhZGRyZXNzID0+IFRpbWUpIHZhbHVpbmc7CiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIGJvdW50aWVzOwogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSB2YWx1ZXM7CiAgCiAgY29uc3RydWN0b3IoYWRkcmVzcyBfZ2l0YXJnKSB7CiAgICBhcmcgPSBfZ2l0YXJnOwogICAgR2l0YXJnID0gZ2l0YXJnKF9naXRhcmcpOwogICAgZ2l0YXJnV2FsbGV0ID0gbXNnLnNlbmRlcjsKICB9CiAgLy8gUkVWSUVXIC0gcGF5aW50byByZXBvPwogIC8vY29uc3RydWN0b3IoYWRkcmVzcyBfd2FsbGV0LCBhZGRyZXNzIF9yZXBvLCBieXRlcyBtZW1vcnkgX21lc3NhZ2UsIGJ5dGVzIG1lbW9yeSBfYXV0aG9yLCBieXRlcyBtZW1vcnkgX2RhdGUpIHsKICBmdW5jdGlvbiBjb21taXQoYWRkcmVzcyBfcmVwbywgc3RyaW5nIG1lbW9yeSBtZXNzYWdlLCBzdHJpbmcgbWVtb3J5IGF1dGhvciwgc3RyaW5nIG1lbW9yeSBkYXRlLCB1aW50IGVzY3JvdykgcHVibGljIHJldHVybnMgKHVpbnQpIHsKICAgIHJlcXVpcmUoR2l0YXJnLmJhbGFuY2VPZihtc2cuc2VuZGVyKSA+PSBlc2Nyb3cpOwogICAgLy8gUkVWSUVXIC0gc2hvdWxkIHRoZSB0cmFuc2ZlciBiZSBwbGFjZWQgaW50byB0aGUgcmVwbz8KICAgIENvbW1pdCBjID0gbmV3IENvbW1pdChtc2cuc2VuZGVyLCBfcmVwbywgbWVzc2FnZSwgYXV0aG9yLCBkYXRlKTsKICAgIEdpdGFyZy50cmFuc2ZlckZyb20obXNnLnNlbmRlciwgYWRkcmVzcyhjKSwgZXNjcm93KTsKICAgIFJlcG8gcmVwbyA9IFJlcG8oX3JlcG8pOwogICAgVGltZSBtZW1vcnkgdGltZSA9IFRpbWUoYWRkcmVzcyhjKSwgYmxvY2sudGltZXN0YW1wKTsKICAgIGNvbW1pdHNbcmVwb10ucHVzaCh0aW1lKTsKICAgIHZhbHVpbmdbYWRkcmVzcyhjKV0gPSB0aW1lOwogICAgcmV0dXJuIGJsb2NrLnRpbWVzdGFtcDsKICB9CiAgLy8gcmFpc2UgdmFsdWUgb2YgY29tbWl0cyAtIGNhbGxlZCB3aGVuIHVzZWQgc3VjY2Vzc2Z1bGx5IGJ5IGNoYWluCiAgZnVuY3Rpb24gdXAoYWRkcmVzcyBwYXlhYmxlIF9jb21taXQpIHB1YmxpYyBwYXlhYmxlIHJldHVybnMgKHVpbnQpIHsgLy9yZS11cD8KICAgIC8vIHN1YnRyYWN0IHRpbWVzdGFtcHMgCiAgICAvLyBUT0RPIC0gcmVwbyBvd25lciBvciBnaXRhcnJheSB0aWUgaW4/CiAgICBUaW1lIG1lbW9yeSB0aW1lID0gdmFsdWluZ1tfY29tbWl0XTsKICAgIHVpbnQgX3ZhbHVlID0gYmxvY2sudGltZXN0YW1wIC0gdGltZS50aW1lc3RhbXA7CiAgICAvLyBSRVZJRVcgLSBndGUKICAgIHJlcXVpcmUoR2l0YXJnLmJhbGFuY2VPZihtc2cuc2VuZGVyKSA+IF92YWx1ZSk7CiAgICAvLyBSRVZJRVcgLSByZXBvIGluc3RlYWQgb2YgY29tbWl0PwogICAgR2l0YXJnLnRyYW5zZmVyRnJvbShtc2cuc2VuZGVyLCBfY29tbWl0LCBfdmFsdWUpOwogICAgdmFsdWVzW19jb21taXRdID0gX3ZhbHVlOwogICAgcmV0dXJuIF92YWx1ZTsKICB9CiAgLy8gcmFpc2UgdmFsdWUgb2YgY29tbWl0cyAtIGNhbGxlZCB3aGVuIGlzc3VlIGlzIGNyZWF0ZWQgaW52b2x2aW5nIGNvbW1pdAogIGZ1bmN0aW9uIGRvd24oYWRkcmVzcyBwYXlhYmxlIF9yZXBvLCBhZGRyZXNzIHBheWFibGUgX2NvbW1pdCwgdWludCBib3VudHkpIHB1YmxpYyBwYXlhYmxlIHJldHVybnMgKHVpbnQpIHsKICAgIC8vIFRPRE8gLSBjaGVjayBnaXRhcmcgdG9rZW4gc3Rhc2ggb2Ygd2FsbGV0CiAgICBSZXBvIHJlcG8gPSBSZXBvKF9yZXBvKTsKICAgIC8vIFRPRE8gLSBnaXRvcmcgbGlicmFyeSB0byB1c2UgaGFuZHNoYWtlcwogICAgLy8gUkVWSUVXIC0gc2hvdWxkIHRoaXMgYmUgdGhlIGNvbW1pdCBvd25lcj8KICAgIHJlcXVpcmUobXNnLnNlbmRlciA9PSByZXBvLm93bmVyKCkpOwogICAgcmVxdWlyZSh2YWx1ZXNbX2NvbW1pdF0gPj0gYm91bnR5ICYmIEdpdGFyZy5iYWxhbmNlT2YoX2NvbW1pdCkgPj0gYm91bnR5KTsKICAgIEdpdGFyZy50cmFuc2ZlckZyb20oX2NvbW1pdCwgX3JlcG8sIGJvdW50eSk7CiAgICAvLyBSRVZJRVcgLSBib3VudHkgbmVlZGVkCiAgICBib3VudGllc1tfY29tbWl0XSArPSBib3VudHk7CiAgICAvLyBSRVZJRVcgLSB2YWx1ZXMgYmFzZWQgb24gdGhlIGdpdCB0b2tlbiBiYWNrZWQ/CiAgICB2YWx1ZXNbX2NvbW1pdF0gLT0gYm91bnR5OwogICAgcmV0dXJuIDA7CiAgfQogIC8vIHF1ZXJ5IHZhbHVlIG9mIGNvbW1pdAogIGZ1bmN0aW9uIHZhbHVlKGFkZHJlc3MgX2NvbW1pdCkgcHVibGljIHZpZXcgcmV0dXJucyAodWludCkgewogICAgcmV0dXJuIHZhbHVlc1tfY29tbWl0XTsKICB9CiAgLy8gcXVlcnkgY29tbWl0cyBieSByYW5nZSwgcmVwbyBvciB2YWx1ZQogIGZ1bmN0aW9uIHF1ZXJ5KGFkZHJlc3MgX3JlcG8sIHVpbnQgc3RhcnQsIHVpbnQgZW5kKSBwdWJsaWMgdmlldyByZXR1cm5zIChUaW1lW10gbWVtb3J5KSB7CiAgICBUaW1lW10gbWVtb3J5IF9jb21taXRzOwogICAgVGltZVtdIG1lbW9yeSByZXBvID0gY29tbWl0c1tSZXBvKF9yZXBvKV07CiAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCByZXBvLmxlbmd0aDsgaSsrKSB7CiAgICAgIFRpbWUgbWVtb3J5IHRpbWUgPSByZXBvW2ldOwogICAgICBpZiAodGltZS50aW1lc3RhbXAgPj0gc3RhcnQgJiYgdGltZS50aW1lc3RhbXAgPD0gZW5kKSBfY29tbWl0c1tpXSA9IHRpbWU7CiAgICB9CiAgICByZXR1cm4gX2NvbW1pdHM7IAogIH0KICBmdW5jdGlvbiBxdWVyeShhZGRyZXNzIHJlcG8pIHB1YmxpYyB2aWV3IHJldHVybnMgKFRpbWVbXSBtZW1vcnkpIHsKICAgIHJldHVybiBjb21taXRzW1JlcG8ocmVwbyldOwogIH0KICBmdW5jdGlvbiBxdWVyeShhZGRyZXNzIF9yZXBvLCB1aW50IF92YWx1ZSkgcHVibGljIHZpZXcgcmV0dXJucyAoVGltZVtdIG1lbW9yeSkgewogICAgVGltZVtdIG1lbW9yeSBfY29tbWl0czsKICAgIFRpbWVbXSBtZW1vcnkgcmVwbyA9IGNvbW1pdHNbUmVwbyhfcmVwbyldOwogICAgZm9yICh1aW50IGkgPSAwOyBpIDwgcmVwby5sZW5ndGg7IGkrKykgewogICAgICBpZiAodmFsdWVzW3JlcG9baV0uY29tbWl0XSA9PSBfdmFsdWUpIHsKICAgICAgICBfY29tbWl0c1tpXSA9IHJlcG9baV07CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBfY29tbWl0czsKICB9Cn0K",
  "gitarg": "Ly8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IFVOTElDRU5TRUQKcHJhZ21hIHNvbGlkaXR5ID49IjAuOC4xOCI7Ci8vIEludGVuZGVkIHVzZTogZXhjaGFuZ2UgZm9yIHNlcnZpY2VzIG9uIGdpdGFyZyBkZWNlbnRyYWxpemVkIHBsYXRmb3JtIGFuZCBhZGEgTkZUcyAocmVsZWFzZSBkYXRlIEp1bmUgMm5kIC0gSnVuZSAxNXRoIDIwMjMpCi8vIE5JQ0UtVE8tSEFWRVM6IAovLyAqIGxvY2sgcGFzc3dvcmQgaW50ZXJmYWNlCi8vICogdW5sb2NrIHBhc3N3b3JkIGludGVyZmFjZQovLyAqIHRpbWVzdGFtcCBiYXNlZCBsb2Nrb3V0Cgpjb250cmFjdCBnaXRhcmcgewogIC8qc3RydWN0IFNwZW5kRG93biB7CiAgICBhZGRyZXNzIG93bmVyOwogICAgYWRkcmVzcyBzcGVuZGVyOwogICAgdWludDI1NiBhbW91bnQ7CiAgfSAqLwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwoKCiAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwcml2YXRlIGJhbGFuY2VzOwogIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSBwcml2YXRlIGxvY2tlZDsKCiAgdWludDI1NiB0b3RhbFN1cHBseV8gPSAxMDAwIGV0aGVyOwoKICBjb25zdHJ1Y3RvcigpIHsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gdG90YWxTdXBwbHlfOwogIH0KICBmdW5jdGlvbiBsb2NrKCkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGxvY2tlZFttc2cuc2VuZGVyXSA9IHRydWU7CiAgICByZXR1cm4gbG9ja2VkW21zZy5zZW5kZXJdOwogIH0KICBmdW5jdGlvbiB1bmxvY2soKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgbG9ja2VkW21zZy5zZW5kZXJdID0gZmFsc2U7CiAgICByZXR1cm4gbG9ja2VkW21zZy5zZW5kZXJdOwogIH0KCiAgLy8gSUNPIEVSQy0yMCBzdGFuZGFyZCBmdW5jdGlvbnMKCiAgLy9odHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTIwI25hbWUKICAvLyBmdW5jdGlvbiBkZWZpbml0aW9uIGNhbiBiZSBjaGFuZ2VkIHRvIHB1cmUgLSBub3QgaW4gc3RhbmRhcmQKICBmdW5jdGlvbiBuYW1lKCkgcHVibGljIHB1cmUgcmV0dXJucyAoc3RyaW5nIG1lbW9yeSkgewogICAgcmV0dXJuICJnaXRhcmciOyAgCiAgfQogIC8vaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0yMCNzeW1ib2wKICAvLyBmdW5jdGlvbiBkZWZpbml0aW9uIGNhbiBiZSBjaGFuZ2VkIHRvIHB1cmUgLSBub3QgaW4gc3RhbmRhcmQKICBmdW5jdGlvbiBzeW1ib2woKSBwdWJsaWMgcHVyZSByZXR1cm5zIChzdHJpbmcgbWVtb3J5KSB7CiAgICByZXR1cm4gIkdJVCI7CiAgfQogIC8vaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0yMCNkZWNpbWFscwogIC8vIGZ1bmN0aW9uIGRlZmluaXRpb24gY2FuIGJlIGNoYW5nZWQgdG8gcHVyZSAtIG5vdCBpbiBzdGFuZGFyZAogIGZ1bmN0aW9uIGRlY2ltYWxzKCkgcHVibGljIHB1cmUgcmV0dXJucyAodWludDgpIHsKICAgIHJldHVybiA2OwogIH0KICAvL2h0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMjAjZGVjaW1hbHMKICAvLyBmdW5jdGlvbiBkZWZpbml0aW9uIGNhbiBiZSBjaGFuZ2VkIHRvIHB1cmUgLSBub3QgaW4gc3RhbmRhcmQKICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiB0b3RhbFN1cHBseV87CiAgfQogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXF1aXJlKCFsb2NrZWRbbXNnLnNlbmRlcl0gJiYgIWxvY2tlZFtfb3duZXJdKTsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIHJlcXVpcmUoIWxvY2tlZFttc2cuc2VuZGVyXSAmJiAhbG9ja2VkW190b10pOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtIF92YWx1ZTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlOwogICAgZW1pdCBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgcmVxdWlyZSghbG9ja2VkW21zZy5zZW5kZXJdICYmICFsb2NrZWRbX2Zyb21dICYmICFsb2NrZWRbX3RvXSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1tfZnJvbV0pOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOwogICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dIC0gX3ZhbHVlOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtIF92YWx1ZTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlOwogICAgZW1pdCBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIHJlcXVpcmUoIWxvY2tlZFttc2cuc2VuZGVyXSAmJiAhbG9ja2VkW19zcGVuZGVyXSk7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIGVtaXQgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgLy8gU1RZTEVFRQogICAgLy9mb3IgKHVpbnQgaSA9IDA7IGkgPCBzcGVuZERvd25GdW5kcy5sZW5ndGg7IGkrKykgewogICAgIC8vIGlmIChzcGVuZERvd25GdW5kc1tpXS5zcGVuZGVyID09IF9zcGVuZGVyICYmIHNwZW5kRG93bkZ1bmRzW2ldLm93bmVyID09IF9vd25lcikgewogICAgICAvLyAgcmV0dXJuIHNwZW5kRG93bkZ1bmRzW2ldLmFtb3VudDsKICAgICAgLy99CiAgICAvL30KICAgIHJlcXVpcmUoIWxvY2tlZFttc2cuc2VuZGVyXSAmJiAhbG9ja2VkW19vd25lcl0gJiYgIWxvY2tlZFtfc3BlbmRlcl0pOwogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQp9Cg=="
}