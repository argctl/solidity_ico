{
  "giteta": "Ly8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJVU0wtMS4xCnByYWdtYSBzb2xpZGl0eSA+PSAiMC44LjE4IjsKaW1wb3J0ICIuL2dpdGFyZy5zb2wiOwppbXBvcnQgIi4vb2JqZWN0cy9SZXBvLnNvbCI7CmltcG9ydCAiLi9vYmplY3RzL0NvbW1pdC5zb2wiOwppbXBvcnQgIi4vb2JqZWN0cy9Mb2cuc29sIjsKCi8vIFRpbWVMb2cgaGFuZHNoYWtlIHN0cmluZy9ieXRlcyBmb3IgYmxvY2tjaGFpbiBpbnRlcmZhY2UKCmNvbnRyYWN0IGdpdGV0YSB7CiAgYWRkcmVzcyBnaXRhcmdXYWxsZXQ7CiAgZ2l0YXJnIEdpdGFyZzsKCiAgc3RydWN0IFRpbWUgewogICAgYWRkcmVzcyBjb21taXQ7CiAgICB1aW50IHRpbWVzdGFtcDsKICB9CgogIG1hcHBpbmcoUmVwbyA9PiBUaW1lW10pIGNvbW1pdHM7CiAgbWFwcGluZyhhZGRyZXNzID0+IFRpbWUpIHZhbHVpbmc7CiAgbWFwcGluZyhhZGRyZXNzID0+IHVpbnQpIGJvdW50aWVzOwogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50KSB2YWx1ZXM7CiAgCiAgY29uc3RydWN0b3IoYWRkcmVzcyBfZ2l0YXJnKSB7CiAgICBHaXRhcmcgPSBnaXRhcmcoX2dpdGFyZyk7CiAgICBnaXRhcmdXYWxsZXQgPSBtc2cuc2VuZGVyOwogIH0KICAvLyBSRVZJRVcgLSBwYXlpbnRvIHJlcG8/CiAgLy9jb25zdHJ1Y3RvcihhZGRyZXNzIF93YWxsZXQsIGFkZHJlc3MgX3JlcG8sIGJ5dGVzIG1lbW9yeSBfbWVzc2FnZSwgYnl0ZXMgbWVtb3J5IF9hdXRob3IsIGJ5dGVzIG1lbW9yeSBfZGF0ZSkgewogIGZ1bmN0aW9uIGNvbW1pdChhZGRyZXNzIF9yZXBvLCBzdHJpbmcgbWVtb3J5IG1lc3NhZ2UsIHN0cmluZyBtZW1vcnkgYXV0aG9yLCBzdHJpbmcgbWVtb3J5IGRhdGUsIHVpbnQgZXNjcm93KSBwdWJsaWMgcmV0dXJucyAodWludCkgewogICAgcmVxdWlyZShHaXRhcmcuYmFsYW5jZU9mKG1zZy5zZW5kZXIpID49IGVzY3Jvdyk7CiAgICAvLyBSRVZJRVcgLSBzaG91bGQgdGhlIHRyYW5zZmVyIGJlIHBsYWNlZCBpbnRvIHRoZSByZXBvPwogICAgQ29tbWl0IGMgPSBuZXcgQ29tbWl0KG1zZy5zZW5kZXIsIF9yZXBvLCBtZXNzYWdlLCBhdXRob3IsIGRhdGUpOwogICAgR2l0YXJnLnRyYW5zZmVyRnJvbShtc2cuc2VuZGVyLCBhZGRyZXNzKGMpLCBlc2Nyb3cpOwogICAgUmVwbyByZXBvID0gUmVwbyhfcmVwbyk7CiAgICBUaW1lIG1lbW9yeSB0aW1lID0gVGltZShhZGRyZXNzKGMpLCBibG9jay50aW1lc3RhbXApOwogICAgY29tbWl0c1tyZXBvXS5wdXNoKHRpbWUpOwogICAgdmFsdWluZ1thZGRyZXNzKGMpXSA9IHRpbWU7CiAgICByZXR1cm4gYmxvY2sudGltZXN0YW1wOwogIH0KICAvLyByYWlzZSB2YWx1ZSBvZiBjb21taXRzIC0gY2FsbGVkIHdoZW4gdXNlZCBzdWNjZXNzZnVsbHkgYnkgY2hhaW4KICBmdW5jdGlvbiB1cChhZGRyZXNzIHBheWFibGUgX2NvbW1pdCkgcHVibGljIHBheWFibGUgcmV0dXJucyAodWludCkgeyAvL3JlLXVwPwogICAgLy8gc3VidHJhY3QgdGltZXN0YW1wcyAKICAgIC8vIFRPRE8gLSByZXBvIG93bmVyIG9yIGdpdGFycmF5IHRpZSBpbj8KICAgIFRpbWUgbWVtb3J5IHRpbWUgPSB2YWx1aW5nW19jb21taXRdOwogICAgdWludCBfdmFsdWUgPSBibG9jay50aW1lc3RhbXAgLSB0aW1lLnRpbWVzdGFtcDsKICAgIC8vIFJFVklFVyAtIGd0ZQogICAgcmVxdWlyZShHaXRhcmcuYmFsYW5jZU9mKG1zZy5zZW5kZXIpID4gX3ZhbHVlKTsKICAgIC8vIFJFVklFVyAtIHJlcG8gaW5zdGVhZCBvZiBjb21taXQ/CiAgICBHaXRhcmcudHJhbnNmZXJGcm9tKG1zZy5zZW5kZXIsIF9jb21taXQsIF92YWx1ZSk7CiAgICB2YWx1ZXNbX2NvbW1pdF0gPSBfdmFsdWU7CiAgICByZXR1cm4gX3ZhbHVlOwogIH0KICAvLyByYWlzZSB2YWx1ZSBvZiBjb21taXRzIC0gY2FsbGVkIHdoZW4gaXNzdWUgaXMgY3JlYXRlZCBpbnZvbHZpbmcgY29tbWl0CiAgZnVuY3Rpb24gZG93bihhZGRyZXNzIHBheWFibGUgX3JlcG8sIGFkZHJlc3MgcGF5YWJsZSBfY29tbWl0LCB1aW50IGJvdW50eSkgcHVibGljIHBheWFibGUgcmV0dXJucyAodWludCkgewogICAgLy8gVE9ETyAtIGNoZWNrIGdpdGFyZyB0b2tlbiBzdGFzaCBvZiB3YWxsZXQKICAgIFJlcG8gcmVwbyA9IFJlcG8oX3JlcG8pOwogICAgLy8gVE9ETyAtIGdpdG9yZyBsaWJyYXJ5IHRvIHVzZSBoYW5kc2hha2VzCiAgICAvLyBSRVZJRVcgLSBzaG91bGQgdGhpcyBiZSB0aGUgY29tbWl0IG93bmVyPwogICAgcmVxdWlyZShtc2cuc2VuZGVyID09IHJlcG8uZ2V0T3duZXIoKSk7CiAgICByZXF1aXJlKHZhbHVlc1tfY29tbWl0XSA+PSBib3VudHkgJiYgR2l0YXJnLmJhbGFuY2VPZihfY29tbWl0KSA+PSBib3VudHkpOwogICAgR2l0YXJnLnRyYW5zZmVyRnJvbShfY29tbWl0LCBfcmVwbywgYm91bnR5KTsKICAgIC8vIFJFVklFVyAtIGJvdW50eSBuZWVkZWQKICAgIGJvdW50aWVzW19jb21taXRdICs9IGJvdW50eTsKICAgIC8vIFJFVklFVyAtIHZhbHVlcyBiYXNlZCBvbiB0aGUgZ2l0IHRva2VuIGJhY2tlZD8KICAgIHZhbHVlc1tfY29tbWl0XSAtPSBib3VudHk7CiAgICByZXR1cm4gMDsKICB9CiAgLy8gcXVlcnkgdmFsdWUgb2YgY29tbWl0CiAgZnVuY3Rpb24gdmFsdWUoYWRkcmVzcyBfY29tbWl0KSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50KSB7CiAgICByZXR1cm4gdmFsdWVzW19jb21taXRdOwogIH0KICAvLyBxdWVyeSBjb21taXRzIGJ5IHJhbmdlLCByZXBvIG9yIHZhbHVlCiAgZnVuY3Rpb24gcXVlcnkoYWRkcmVzcyBfcmVwbywgdWludCBzdGFydCwgdWludCBlbmQpIHB1YmxpYyB2aWV3IHJldHVybnMgKFRpbWVbXSBtZW1vcnkpIHsKICAgIFRpbWVbXSBtZW1vcnkgX2NvbW1pdHM7CiAgICBUaW1lW10gbWVtb3J5IHJlcG8gPSBjb21taXRzW1JlcG8oX3JlcG8pXTsKICAgIGZvciAodWludCBpID0gMDsgaSA8IHJlcG8ubGVuZ3RoOyBpKyspIHsKICAgICAgVGltZSBtZW1vcnkgdGltZSA9IHJlcG9baV07CiAgICAgIGlmICh0aW1lLnRpbWVzdGFtcCA+PSBzdGFydCAmJiB0aW1lLnRpbWVzdGFtcCA8PSBlbmQpIF9jb21taXRzW2ldID0gdGltZTsKICAgIH0KICAgIHJldHVybiBfY29tbWl0czsgCiAgfQogIGZ1bmN0aW9uIHF1ZXJ5KGFkZHJlc3MgcmVwbykgcHVibGljIHZpZXcgcmV0dXJucyAoVGltZVtdIG1lbW9yeSkgewogICAgcmV0dXJuIGNvbW1pdHNbUmVwbyhyZXBvKV07CiAgfQogIGZ1bmN0aW9uIHF1ZXJ5KGFkZHJlc3MgX3JlcG8sIHVpbnQgX3ZhbHVlKSBwdWJsaWMgdmlldyByZXR1cm5zIChUaW1lW10gbWVtb3J5KSB7CiAgICBUaW1lW10gbWVtb3J5IF9jb21taXRzOwogICAgVGltZVtdIG1lbW9yeSByZXBvID0gY29tbWl0c1tSZXBvKF9yZXBvKV07CiAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCByZXBvLmxlbmd0aDsgaSsrKSB7CiAgICAgIGlmICh2YWx1ZXNbcmVwb1tpXS5jb21taXRdID09IF92YWx1ZSkgewogICAgICAgIF9jb21taXRzW2ldID0gcmVwb1tpXTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIF9jb21taXRzOwogIH0KfQo=",
  "gitarg": "Ly8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IFVOTElDRU5TRUQKcHJhZ21hIHNvbGlkaXR5ID49IjAuOC4xOCI7Ci8vIEludGVuZGVkIHVzZTogZXhjaGFuZ2UgZm9yIHNlcnZpY2VzIG9uIGdpdGFyZyBkZWNlbnRyYWxpemVkIHBsYXRmb3JtIGFuZCBhZGEgTkZUcyAocmVsZWFzZSBkYXRlIEp1bmUgMm5kIC0gSnVuZSAxNXRoIDIwMjMpCi8vIE5JQ0UtVE8tSEFWRVM6IAovLyAqIGxvY2sgcGFzc3dvcmQgaW50ZXJmYWNlCi8vICogdW5sb2NrIHBhc3N3b3JkIGludGVyZmFjZQovLyAqIHRpbWVzdGFtcCBiYXNlZCBsb2Nrb3V0Cgpjb250cmFjdCBnaXRhcmcgewogIC8qc3RydWN0IFNwZW5kRG93biB7CiAgICBhZGRyZXNzIG93bmVyOwogICAgYWRkcmVzcyBzcGVuZGVyOwogICAgdWludDI1NiBhbW91bnQ7CiAgfSAqLwogIGV2ZW50IFRyYW5zZmVyKGFkZHJlc3MgaW5kZXhlZCBfZnJvbSwgYWRkcmVzcyBpbmRleGVkIF90bywgdWludDI1NiBfdmFsdWUpOwogIGV2ZW50IEFwcHJvdmFsKGFkZHJlc3MgaW5kZXhlZCBfb3duZXIsIGFkZHJlc3MgaW5kZXhlZCBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpOwoKCiAgbWFwcGluZyhhZGRyZXNzID0+IG1hcHBpbmcgKGFkZHJlc3MgPT4gdWludDI1NikpIGFsbG93ZWQ7CgogIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwcml2YXRlIGJhbGFuY2VzOwogIG1hcHBpbmcoYWRkcmVzcyA9PiBib29sKSBwcml2YXRlIGxvY2tlZDsKCiAgdWludDI1NiB0b3RhbFN1cHBseV8gPSAxMDAwIGV0aGVyOwoKICBjb25zdHJ1Y3RvcigpIHsKICAgIGJhbGFuY2VzW21zZy5zZW5kZXJdID0gdG90YWxTdXBwbHlfOwogIH0KICBmdW5jdGlvbiBsb2NrKCkgcHVibGljIHJldHVybnMgKGJvb2wpIHsKICAgIGxvY2tlZFttc2cuc2VuZGVyXSA9IHRydWU7CiAgICByZXR1cm4gbG9ja2VkW21zZy5zZW5kZXJdOwogIH0KICBmdW5jdGlvbiB1bmxvY2soKSBwdWJsaWMgcmV0dXJucyAoYm9vbCkgewogICAgbG9ja2VkW21zZy5zZW5kZXJdID0gZmFsc2U7CiAgICByZXR1cm4gbG9ja2VkW21zZy5zZW5kZXJdOwogIH0KCiAgLy8gSUNPIEVSQy0yMCBzdGFuZGFyZCBmdW5jdGlvbnMKCiAgLy9odHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTIwI25hbWUKICAvLyBmdW5jdGlvbiBkZWZpbml0aW9uIGNhbiBiZSBjaGFuZ2VkIHRvIHB1cmUgLSBub3QgaW4gc3RhbmRhcmQKICBmdW5jdGlvbiBuYW1lKCkgcHVibGljIHB1cmUgcmV0dXJucyAoc3RyaW5nIG1lbW9yeSkgewogICAgcmV0dXJuICJnaXRhcmciOyAgCiAgfQogIC8vaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0yMCNzeW1ib2wKICAvLyBmdW5jdGlvbiBkZWZpbml0aW9uIGNhbiBiZSBjaGFuZ2VkIHRvIHB1cmUgLSBub3QgaW4gc3RhbmRhcmQKICBmdW5jdGlvbiBzeW1ib2woKSBwdWJsaWMgcHVyZSByZXR1cm5zIChzdHJpbmcgbWVtb3J5KSB7CiAgICByZXR1cm4gIkdJVCI7CiAgfQogIC8vaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0yMCNkZWNpbWFscwogIC8vIGZ1bmN0aW9uIGRlZmluaXRpb24gY2FuIGJlIGNoYW5nZWQgdG8gcHVyZSAtIG5vdCBpbiBzdGFuZGFyZAogIGZ1bmN0aW9uIGRlY2ltYWxzKCkgcHVibGljIHB1cmUgcmV0dXJucyAodWludDgpIHsKICAgIHJldHVybiA2OwogIH0KICAvL2h0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMjAjZGVjaW1hbHMKICAvLyBmdW5jdGlvbiBkZWZpbml0aW9uIGNhbiBiZSBjaGFuZ2VkIHRvIHB1cmUgLSBub3QgaW4gc3RhbmRhcmQKICBmdW5jdGlvbiB0b3RhbFN1cHBseSgpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgIHJldHVybiB0b3RhbFN1cHBseV87CiAgfQogIGZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIF9vd25lcikgcHVibGljIHZpZXcgcmV0dXJucyAodWludDI1NiBiYWxhbmNlKSB7CiAgICByZXF1aXJlKCFsb2NrZWRbbXNnLnNlbmRlcl0gJiYgIWxvY2tlZFtfb3duZXJdKTsKICAgIHJldHVybiBiYWxhbmNlc1tfb3duZXJdOwogIH0KICBmdW5jdGlvbiB0cmFuc2ZlcihhZGRyZXNzIF90bywgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIHJlcXVpcmUoIWxvY2tlZFttc2cuc2VuZGVyXSAmJiAhbG9ja2VkW190b10pOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYmFsYW5jZXNbbXNnLnNlbmRlcl0pOwogICAgYmFsYW5jZXNbbXNnLnNlbmRlcl0gPSBiYWxhbmNlc1ttc2cuc2VuZGVyXSAtIF92YWx1ZTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlOwogICAgZW1pdCBUcmFuc2Zlcihtc2cuc2VuZGVyLCBfdG8sIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgZnVuY3Rpb24gdHJhbnNmZXJGcm9tKGFkZHJlc3MgX2Zyb20sIGFkZHJlc3MgX3RvLCB1aW50MjU2IF92YWx1ZSkgcHVibGljIHJldHVybnMgKGJvb2wgc3VjY2VzcykgewogICAgcmVxdWlyZSghbG9ja2VkW21zZy5zZW5kZXJdICYmICFsb2NrZWRbX2Zyb21dICYmICFsb2NrZWRbX3RvXSk7CiAgICByZXF1aXJlKF92YWx1ZSA8PSBiYWxhbmNlc1tfZnJvbV0pOwogICAgcmVxdWlyZShfdmFsdWUgPD0gYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0pOwogICAgYmFsYW5jZXNbX2Zyb21dID0gYmFsYW5jZXNbX2Zyb21dIC0gX3ZhbHVlOwogICAgYWxsb3dlZFtfZnJvbV1bbXNnLnNlbmRlcl0gPSBhbGxvd2VkW19mcm9tXVttc2cuc2VuZGVyXSAtIF92YWx1ZTsKICAgIGJhbGFuY2VzW190b10gPSBiYWxhbmNlc1tfdG9dICsgX3ZhbHVlOwogICAgZW1pdCBUcmFuc2ZlcihfZnJvbSwgX3RvLCBfdmFsdWUpOwogICAgcmV0dXJuIHRydWU7CiAgfQogIGZ1bmN0aW9uIGFwcHJvdmUoYWRkcmVzcyBfc3BlbmRlciwgdWludDI1NiBfdmFsdWUpIHB1YmxpYyByZXR1cm5zIChib29sIHN1Y2Nlc3MpIHsKICAgIHJlcXVpcmUoIWxvY2tlZFttc2cuc2VuZGVyXSAmJiAhbG9ja2VkW19zcGVuZGVyXSk7CiAgICBhbGxvd2VkW21zZy5zZW5kZXJdW19zcGVuZGVyXSA9IF92YWx1ZTsKICAgIGVtaXQgQXBwcm92YWwobXNnLnNlbmRlciwgX3NwZW5kZXIsIF92YWx1ZSk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgZnVuY3Rpb24gYWxsb3dhbmNlKGFkZHJlc3MgX293bmVyLCBhZGRyZXNzIF9zcGVuZGVyKSBwdWJsaWMgdmlldyByZXR1cm5zICh1aW50MjU2IHJlbWFpbmluZykgewogICAgLy8gU1RZTEVFRQogICAgLy9mb3IgKHVpbnQgaSA9IDA7IGkgPCBzcGVuZERvd25GdW5kcy5sZW5ndGg7IGkrKykgewogICAgIC8vIGlmIChzcGVuZERvd25GdW5kc1tpXS5zcGVuZGVyID09IF9zcGVuZGVyICYmIHNwZW5kRG93bkZ1bmRzW2ldLm93bmVyID09IF9vd25lcikgewogICAgICAvLyAgcmV0dXJuIHNwZW5kRG93bkZ1bmRzW2ldLmFtb3VudDsKICAgICAgLy99CiAgICAvL30KICAgIHJlcXVpcmUoIWxvY2tlZFttc2cuc2VuZGVyXSAmJiAhbG9ja2VkW19vd25lcl0gJiYgIWxvY2tlZFtfc3BlbmRlcl0pOwogICAgcmV0dXJuIGFsbG93ZWRbX293bmVyXVtfc3BlbmRlcl07CiAgfQp9Cg==",
  "gitarray": "Ly8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJVU0wtMS4xCnByYWdtYSBzb2xpZGl0eSA+PSAiMC44LjE4IjsKaW1wb3J0ICIuL2dpdGV0YS5zb2wiOwovL2ltcG9ydCAiLi9saWJyYXJpZXMvZ2l0b3JnLnNvbCI7CmltcG9ydCAiLi9naXRhcmcuc29sIjsKCmFic3RyYWN0IGNvbnRyYWN0IGdpdGFycmF5IHsKICAKICBtYXBwaW5nKGFkZHJlc3MgPT4gdWludCkgaGFuZHNoYWtlczsKICBjb25zdHJ1Y3RvcihhZGRyZXNzW10gbWVtb3J5IF9oYW5kc2hha2VzKSB7CiAgICBmb3IgKHVpbnQgaSA9IDA7IGkgPCBfaGFuZHNoYWtlcy5sZW5ndGg7IGkrKykgewogICAgICBoYW5kc2hha2VzW19oYW5kc2hha2VzW2ldXSA9IGJsb2NrLnRpbWVzdGFtcDsKICAgIH0KICB9ICAKICAKfQo="
}